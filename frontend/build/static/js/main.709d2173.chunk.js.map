{"version":3,"sources":["Timer/Timer.jsx","index.js"],"names":["Timer","label","startTime","pausedTime","resumedTime","isPaused","onClick","useState","time","updateTime","splitTime","updateSplitTime","console","log","useEffect","toString","calculateStopwatchValue","Date","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","className","difference","hours","Math","floor","minutes","seconds","hoursStr","minutesStr","secondsStr","App","refreshFlag","updateRefreshFlag","timers","updateTimers","timerName","updateTimerName","fetch","then","response","json","data","timerElements","forEach","timer","onClickFunction","is_paused","startTimer","stopTimer","name","push","start_time","resumed_time","paused_time","method","headers","body","JSON","stringify","ClearButton","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.709d2173.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport \"./timer.css\";\n\nexport default function Timer({ label, startTime, pausedTime, resumedTime, isPaused, onClick }) {\n  const [time, updateTime] = useState(\"\");\n  const [splitTime, updateSplitTime] = useState(\"\");\n  console.log(\"re-render\");\n  useEffect(() => {\n    console.log('paused: ' + isPaused.toString());\n    console.log('start time: ' + startTime);\n\n    if (isPaused) {\n      if (startTime == null) {\n        updateTime(\"00:00:00\");\n      } else {\n        updateTime(calculateStopwatchValue(pausedTime - startTime));\n      }\n      if (resumedTime == null) {\n        updateSplitTime(\"00:00:00\");\n      } else {\n        updateSplitTime(calculateStopwatchValue(new Date() - resumedTime));\n      }\n    } else {\n      updateTime(calculateStopwatchValue(new Date() - startTime));\n      updateSplitTime(calculateStopwatchValue(new Date() - resumedTime));\n    }\n  }, [startTime]);\n\n  useInterval(() => {\n    updateTime(calculateStopwatchValue(new Date() - startTime));\n    updateSplitTime(calculateStopwatchValue(new Date() - resumedTime));\n  }, isPaused ? null : 500);\n\n  return (\n    <div className=\"timer-container\" onClick={() => onClick()}>\n      <h2 className=\"timer-label\">{label}</h2>\n      <p className=\"timer\">{time}</p>\n      <p className=\"timer-split-time\">{splitTime}</p>\n    </div>\n  );\n}\n\nfunction calculateStopwatchValue(difference) {\n  var hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n  var minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));\n  var seconds = Math.floor((difference / 1000) % 60);\n\n  var hoursStr = hours, minutesStr = minutes, secondsStr = seconds;\n  if (hours < 10) {\n    hoursStr = \"0\" + hours;\n  }\n  if (minutes < 10) {\n    minutesStr = \"0\" + minutes;\n  }\n  if (seconds < 10) {\n    secondsStr = \"0\" + seconds;\n  }\n  return hoursStr + \":\" + minutesStr + \":\" + secondsStr;\n}\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}","import React, { useEffect, useState } from \"react\";\nimport ReactDOM from 'react-dom';\nimport \"./index.css\";\n\n//Component imports\nimport Timer from \"./Timer/Timer\";\n\nfunction App() {\n  const [refreshFlag, updateRefreshFlag] = useState(0);\n  const [timers, updateTimers] = useState(null);\n  const [timerName, updateTimerName] = useState(null);\n\n  useEffect(() => {\n    fetch(\"http://localhost:8083/getStates\").then(response => response.json()).then(data => {\n      let timerElements = [];\n      data.timers.forEach(timer => {\n        const onClickFunction = timer.is_paused ? startTimer : stopTimer;\n        updateTimerName(timer.name);\n        timerElements.push(\n          <Timer\n            label={timer.name}\n            isPaused={timer.is_paused}\n            startTime={timer.start_time ? new Date(timer.start_time) : null}\n            resumedTime={timer.resumed_time ? new Date(timer.resumed_time) : null}\n            pausedTime={timer.resumed_time ? new Date(timer.paused_time) : null}\n            onClick={() => onClickFunction({ name: timer.name })}\n          />\n        );\n      });\n      updateTimers(timerElements);\n    });\n  }, [refreshFlag]);\n\n\n  const startTimer = ({ name }) => {\n    fetch(\"http://localhost:8083/startTimer\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        timerName: name,\n      })\n    }).then(response => response.json()).then(data => {\n      updateRefreshFlag(!refreshFlag);\n    });\n  }\n\n  const stopTimer = ({ name }) => {\n    fetch(\"http://localhost:8083/stopTimer\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        timerName: name,\n      })\n    }).then(response => response.json()).then(data => {\n      updateRefreshFlag(!refreshFlag);\n    });\n  }\n\n  return (\n    <div>\n      {timers}\n      <ClearButton name={timerName} refreshFlag={refreshFlag} updateRefreshFlag={updateRefreshFlag} />\n      <link href=\"https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;600&display=swap\" rel=\"stylesheet\" />\n\n    </div>\n  );\n\n}\n\nfunction ClearButton({ name, updateRefreshFlag, refreshFlag }) {\n  const clearTimer = () => {\n    fetch(\"http://localhost:8083/clearTimer\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        timerName: name,\n      })\n    }).then(response => response.json()).then(data => {\n      updateRefreshFlag(!refreshFlag);\n    });\n  }\n  return <button onClick={() => clearTimer()} className=\"clear-btn\">\n    âœ•\n  </button>\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}